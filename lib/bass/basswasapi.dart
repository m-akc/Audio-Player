// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, constant_identifier_names

import 'dart:ffi' as ffi;

/// Bindings to `basswasapi.h`.
class Basswasapi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Basswasapi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Basswasapi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_WASAPI_GetVersion() {
    return _BASS_WASAPI_GetVersion();
  }

  late final _BASS_WASAPI_GetVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_WASAPI_GetVersion');
  late final _BASS_WASAPI_GetVersion =
      _BASS_WASAPI_GetVersionPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_SetNotify(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(DWORD, DWORD, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_WASAPI_SetNotify(
      proc,
      user,
    );
  }

  late final _BASS_WASAPI_SetNotifyPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(DWORD, DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_WASAPI_SetNotify');
  late final _BASS_WASAPI_SetNotify = _BASS_WASAPI_SetNotifyPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(DWORD, DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_WASAPI_GetDeviceInfo(
    int device,
    ffi.Pointer<BASS_WASAPI_DEVICEINFO> info,
  ) {
    return _BASS_WASAPI_GetDeviceInfo(
      device,
      info,
    );
  }

  late final _BASS_WASAPI_GetDeviceInfoPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(DWORD, ffi.Pointer<BASS_WASAPI_DEVICEINFO>)>>(
      'BASS_WASAPI_GetDeviceInfo');
  late final _BASS_WASAPI_GetDeviceInfo =
      _BASS_WASAPI_GetDeviceInfoPtr.asFunction<
          int Function(int, ffi.Pointer<BASS_WASAPI_DEVICEINFO>)>(isLeaf: true);

  double BASS_WASAPI_GetDeviceLevel(
    int device,
    int chan,
  ) {
    return _BASS_WASAPI_GetDeviceLevel(
      device,
      chan,
    );
  }

  late final _BASS_WASAPI_GetDeviceLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(DWORD, ffi.Int32)>>(
          'BASS_WASAPI_GetDeviceLevel');
  late final _BASS_WASAPI_GetDeviceLevel =
      _BASS_WASAPI_GetDeviceLevelPtr.asFunction<double Function(int, int)>(
          isLeaf: true);

  int BASS_WASAPI_SetDevice(
    int device,
  ) {
    return _BASS_WASAPI_SetDevice(
      device,
    );
  }

  late final _BASS_WASAPI_SetDevicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'BASS_WASAPI_SetDevice');
  late final _BASS_WASAPI_SetDevice =
      _BASS_WASAPI_SetDevicePtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_WASAPI_GetDevice() {
    return _BASS_WASAPI_GetDevice();
  }

  late final _BASS_WASAPI_GetDevicePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_WASAPI_GetDevice');
  late final _BASS_WASAPI_GetDevice =
      _BASS_WASAPI_GetDevicePtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_CheckFormat(
    int device,
    int freq,
    int chans,
    int flags,
  ) {
    return _BASS_WASAPI_CheckFormat(
      device,
      freq,
      chans,
      flags,
    );
  }

  late final _BASS_WASAPI_CheckFormatPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, DWORD, DWORD, DWORD)>>(
          'BASS_WASAPI_CheckFormat');
  late final _BASS_WASAPI_CheckFormat =
      _BASS_WASAPI_CheckFormatPtr.asFunction<int Function(int, int, int, int)>(
          isLeaf: true);

  int BASS_WASAPI_Init(
    int device,
    int freq,
    int chans,
    int flags,
    double buffer,
    double period,
    ffi.Pointer<
            ffi.NativeFunction<
                DWORD Function(
                    ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_WASAPI_Init(
      device,
      freq,
      chans,
      flags,
      buffer,
      period,
      proc,
      user,
    );
  }

  late final _BASS_WASAPI_InitPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Int32,
              DWORD,
              DWORD,
              DWORD,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<
                  ffi.NativeFunction<
                      DWORD Function(ffi.Pointer<ffi.Void>, DWORD,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_WASAPI_Init');
  late final _BASS_WASAPI_Init = _BASS_WASAPI_InitPtr.asFunction<
      int Function(
          int,
          int,
          int,
          int,
          double,
          double,
          ffi.Pointer<
              ffi.NativeFunction<
                  DWORD Function(
                      ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_WASAPI_Free() {
    return _BASS_WASAPI_Free();
  }

  late final _BASS_WASAPI_FreePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_Free');
  late final _BASS_WASAPI_Free =
      _BASS_WASAPI_FreePtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_GetInfo(
    ffi.Pointer<BASS_WASAPI_INFO> info,
  ) {
    return _BASS_WASAPI_GetInfo(
      info,
    );
  }

  late final _BASS_WASAPI_GetInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<BASS_WASAPI_INFO>)>>(
          'BASS_WASAPI_GetInfo');
  late final _BASS_WASAPI_GetInfo = _BASS_WASAPI_GetInfoPtr.asFunction<
      int Function(ffi.Pointer<BASS_WASAPI_INFO>)>(isLeaf: true);

  double BASS_WASAPI_GetCPU() {
    return _BASS_WASAPI_GetCPU();
  }

  late final _BASS_WASAPI_GetCPUPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('BASS_WASAPI_GetCPU');
  late final _BASS_WASAPI_GetCPU =
      _BASS_WASAPI_GetCPUPtr.asFunction<double Function()>(isLeaf: true);

  int BASS_WASAPI_Lock(
    int lock,
  ) {
    return _BASS_WASAPI_Lock(
      lock,
    );
  }

  late final _BASS_WASAPI_LockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('BASS_WASAPI_Lock');
  late final _BASS_WASAPI_Lock =
      _BASS_WASAPI_LockPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_WASAPI_Start() {
    return _BASS_WASAPI_Start();
  }

  late final _BASS_WASAPI_StartPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_Start');
  late final _BASS_WASAPI_Start =
      _BASS_WASAPI_StartPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_Stop(
    int reset,
  ) {
    return _BASS_WASAPI_Stop(
      reset,
    );
  }

  late final _BASS_WASAPI_StopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('BASS_WASAPI_Stop');
  late final _BASS_WASAPI_Stop =
      _BASS_WASAPI_StopPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_WASAPI_IsStarted() {
    return _BASS_WASAPI_IsStarted();
  }

  late final _BASS_WASAPI_IsStartedPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_IsStarted');
  late final _BASS_WASAPI_IsStarted =
      _BASS_WASAPI_IsStartedPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_SetVolume(
    int mode,
    double volume,
  ) {
    return _BASS_WASAPI_SetVolume(
      mode,
      volume,
    );
  }

  late final _BASS_WASAPI_SetVolumePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Float)>>(
          'BASS_WASAPI_SetVolume');
  late final _BASS_WASAPI_SetVolume =
      _BASS_WASAPI_SetVolumePtr.asFunction<int Function(int, double)>(
          isLeaf: true);

  double BASS_WASAPI_GetVolume(
    int mode,
  ) {
    return _BASS_WASAPI_GetVolume(
      mode,
    );
  }

  late final _BASS_WASAPI_GetVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(DWORD)>>(
          'BASS_WASAPI_GetVolume');
  late final _BASS_WASAPI_GetVolume =
      _BASS_WASAPI_GetVolumePtr.asFunction<double Function(int)>(isLeaf: true);

  int BASS_WASAPI_SetMute(
    int mode,
    int mute,
  ) {
    return _BASS_WASAPI_SetMute(
      mode,
      mute,
    );
  }

  late final _BASS_WASAPI_SetMutePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_WASAPI_SetMute');
  late final _BASS_WASAPI_SetMute =
      _BASS_WASAPI_SetMutePtr.asFunction<int Function(int, int)>(isLeaf: true);

  int BASS_WASAPI_GetMute(
    int mode,
  ) {
    return _BASS_WASAPI_GetMute(
      mode,
    );
  }

  late final _BASS_WASAPI_GetMutePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_WASAPI_GetMute');
  late final _BASS_WASAPI_GetMute =
      _BASS_WASAPI_GetMutePtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_WASAPI_PutData(
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_WASAPI_PutData(
      buffer,
      length,
    );
  }

  late final _BASS_WASAPI_PutDataPtr =
      _lookup<ffi.NativeFunction<DWORD Function(ffi.Pointer<ffi.Void>, DWORD)>>(
          'BASS_WASAPI_PutData');
  late final _BASS_WASAPI_PutData = _BASS_WASAPI_PutDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_WASAPI_GetData(
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_WASAPI_GetData(
      buffer,
      length,
    );
  }

  late final _BASS_WASAPI_GetDataPtr =
      _lookup<ffi.NativeFunction<DWORD Function(ffi.Pointer<ffi.Void>, DWORD)>>(
          'BASS_WASAPI_GetData');
  late final _BASS_WASAPI_GetData = _BASS_WASAPI_GetDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_WASAPI_GetLevel() {
    return _BASS_WASAPI_GetLevel();
  }

  late final _BASS_WASAPI_GetLevelPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_WASAPI_GetLevel');
  late final _BASS_WASAPI_GetLevel =
      _BASS_WASAPI_GetLevelPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_WASAPI_GetLevelEx(
    ffi.Pointer<ffi.Float> levels,
    double length,
    int flags,
  ) {
    return _BASS_WASAPI_GetLevelEx(
      levels,
      length,
      flags,
    );
  }

  late final _BASS_WASAPI_GetLevelExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<ffi.Float>, ffi.Float,
              DWORD)>>('BASS_WASAPI_GetLevelEx');
  late final _BASS_WASAPI_GetLevelEx = _BASS_WASAPI_GetLevelExPtr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, double, int)>(isLeaf: true);
}

class BASS_WASAPI_DEVICEINFO extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> id;

  @DWORD()
  external int type;

  @DWORD()
  external int flags;

  @ffi.Float()
  external double minperiod;

  @ffi.Float()
  external double defperiod;

  @DWORD()
  external int mixfreq;

  @DWORD()
  external int mixchans;
}

typedef DWORD = ffi.Uint64;

class BASS_WASAPI_INFO extends ffi.Struct {
  @DWORD()
  external int initflags;

  @DWORD()
  external int freq;

  @DWORD()
  external int chans;

  @DWORD()
  external int format;

  @DWORD()
  external int buflen;

  @ffi.Float()
  external double volmax;

  @ffi.Float()
  external double volmin;

  @ffi.Float()
  external double volstep;
}

typedef BOOL = ffi.Int32;

const int BASS_ERROR_WASAPI = 5000;

const int BASS_ERROR_WASAPI_BUFFER = 5001;

const int BASS_ERROR_WASAPI_CATEGORY = 5002;

const int BASS_ERROR_WASAPI_DENIED = 5003;

const int BASS_WASAPI_TYPE_NETWORKDEVICE = 0;

const int BASS_WASAPI_TYPE_SPEAKERS = 1;

const int BASS_WASAPI_TYPE_LINELEVEL = 2;

const int BASS_WASAPI_TYPE_HEADPHONES = 3;

const int BASS_WASAPI_TYPE_MICROPHONE = 4;

const int BASS_WASAPI_TYPE_HEADSET = 5;

const int BASS_WASAPI_TYPE_HANDSET = 6;

const int BASS_WASAPI_TYPE_DIGITAL = 7;

const int BASS_WASAPI_TYPE_SPDIF = 8;

const int BASS_WASAPI_TYPE_HDMI = 9;

const int BASS_WASAPI_TYPE_UNKNOWN = 10;

const int BASS_DEVICE_ENABLED = 1;

const int BASS_DEVICE_DEFAULT = 2;

const int BASS_DEVICE_INIT = 4;

const int BASS_DEVICE_LOOPBACK = 8;

const int BASS_DEVICE_INPUT = 16;

const int BASS_DEVICE_UNPLUGGED = 32;

const int BASS_DEVICE_DISABLED = 64;

const int BASS_WASAPI_EXCLUSIVE = 1;

const int BASS_WASAPI_AUTOFORMAT = 2;

const int BASS_WASAPI_BUFFER = 4;

const int BASS_WASAPI_EVENT = 16;

const int BASS_WASAPI_SAMPLES = 32;

const int BASS_WASAPI_DITHER = 64;

const int BASS_WASAPI_RAW = 128;

const int BASS_WASAPI_ASYNC = 256;

const int BASS_WASAPI_CATEGORY_MASK = 61440;

const int BASS_WASAPI_CATEGORY_OTHER = 0;

const int BASS_WASAPI_CATEGORY_FOREGROUNDONLYMEDIA = 4096;

const int BASS_WASAPI_CATEGORY_BACKGROUNDCAPABLEMEDIA = 8192;

const int BASS_WASAPI_CATEGORY_COMMUNICATIONS = 12288;

const int BASS_WASAPI_CATEGORY_ALERTS = 16384;

const int BASS_WASAPI_CATEGORY_SOUNDEFFECTS = 20480;

const int BASS_WASAPI_CATEGORY_GAMEEFFECTS = 24576;

const int BASS_WASAPI_CATEGORY_GAMEMEDIA = 28672;

const int BASS_WASAPI_CATEGORY_GAMECHAT = 32768;

const int BASS_WASAPI_CATEGORY_SPEECH = 36864;

const int BASS_WASAPI_CATEGORY_MOVIE = 40960;

const int BASS_WASAPI_CATEGORY_MEDIA = 45056;

const int BASS_WASAPI_FORMAT_FLOAT = 0;

const int BASS_WASAPI_FORMAT_8BIT = 1;

const int BASS_WASAPI_FORMAT_16BIT = 2;

const int BASS_WASAPI_FORMAT_24BIT = 3;

const int BASS_WASAPI_FORMAT_32BIT = 4;

const int BASS_WASAPI_CURVE_DB = 0;

const int BASS_WASAPI_CURVE_LINEAR = 1;

const int BASS_WASAPI_CURVE_WINDOWS = 2;

const int BASS_WASAPI_VOL_SESSION = 8;

const int BASS_WASAPI_NOTIFY_ENABLED = 0;

const int BASS_WASAPI_NOTIFY_DISABLED = 1;

const int BASS_WASAPI_NOTIFY_DEFOUTPUT = 2;

const int BASS_WASAPI_NOTIFY_DEFINPUT = 3;

const int BASS_WASAPI_NOTIFY_FAIL = 256;

typedef WASAPIPROC = ffi.Uint64 Function(ffi.Pointer<ffi.Void>,ffi.Uint64,ffi.Pointer<ffi.Void>);
final ffi.Pointer<ffi.NativeFunction<WASAPIPROC>> WASAPIPROC_PUSH = ffi.Pointer.fromAddress(0);
final ffi.Pointer<ffi.NativeFunction<WASAPIPROC>> WASAPIPROC_BASS = ffi.Pointer.fromAddress(-1);