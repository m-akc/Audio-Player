// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, constant_identifier_names

import 'dart:ffi' as ffi;

/// Bindings to `bassvst.h`.
class Bassvst {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bassvst(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bassvst.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_VST_ChannelSetDSP(
    int chHandle,
    ffi.Pointer<ffi.Void> dllFile,
    int flags,
    int priority,
  ) {
    return _BASS_VST_ChannelSetDSP(
      chHandle,
      dllFile,
      flags,
      priority,
    );
  }

  late final _BASS_VST_ChannelSetDSPPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<ffi.Void>, DWORD,
              ffi.Int32)>>('BASS_VST_ChannelSetDSP');
  late final _BASS_VST_ChannelSetDSP = _BASS_VST_ChannelSetDSPPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  int BASS_VST_ChannelSetDSPEx(
    int chHandle,
    ffi.Pointer<ffi.Void> dllFile,
    int flags,
    int priority,
    ffi.Pointer<ffi.Int8> pluginList,
    int pluginListSize,
    int pluginID,
  ) {
    return _BASS_VST_ChannelSetDSPEx(
      chHandle,
      dllFile,
      flags,
      priority,
      pluginList,
      pluginListSize,
      pluginID,
    );
  }

  late final _BASS_VST_ChannelSetDSPExPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD,
              ffi.Pointer<ffi.Void>,
              DWORD,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('BASS_VST_ChannelSetDSPEx');
  late final _BASS_VST_ChannelSetDSPEx =
      _BASS_VST_ChannelSetDSPExPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Void>, int, int,
              ffi.Pointer<ffi.Int8>, int, int)>(isLeaf: true);

  int BASS_VST_ChannelRemoveDSP(
    int chHandle,
    int vstHandle,
  ) {
    return _BASS_VST_ChannelRemoveDSP(
      chHandle,
      vstHandle,
    );
  }

  late final _BASS_VST_ChannelRemoveDSPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_VST_ChannelRemoveDSP');
  late final _BASS_VST_ChannelRemoveDSP =
      _BASS_VST_ChannelRemoveDSPPtr.asFunction<int Function(int, int)>(
          isLeaf: true);

  int BASS_VST_ChannelCreate(
    int freq,
    int chans,
    ffi.Pointer<ffi.Void> dllFile,
    int flags,
  ) {
    return _BASS_VST_ChannelCreate(
      freq,
      chans,
      dllFile,
      flags,
    );
  }

  late final _BASS_VST_ChannelCreatePtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, DWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_VST_ChannelCreate');
  late final _BASS_VST_ChannelCreate = _BASS_VST_ChannelCreatePtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_VST_ChannelCreateEx(
    int freq,
    int chans,
    ffi.Pointer<ffi.Void> dllFile,
    int flags,
    ffi.Pointer<ffi.Int8> pluginList,
    int pluginListSize,
    int pluginID,
  ) {
    return _BASS_VST_ChannelCreateEx(
      freq,
      chans,
      dllFile,
      flags,
      pluginList,
      pluginListSize,
      pluginID,
    );
  }

  late final _BASS_VST_ChannelCreateExPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD,
              DWORD,
              ffi.Pointer<ffi.Void>,
              DWORD,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('BASS_VST_ChannelCreateEx');
  late final _BASS_VST_ChannelCreateEx =
      _BASS_VST_ChannelCreateExPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Int8>, int, int)>(isLeaf: true);

  int BASS_VST_ChannelFree(
    int vstHandle,
  ) {
    return _BASS_VST_ChannelFree(
      vstHandle,
    );
  }

  late final _BASS_VST_ChannelFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_VST_ChannelFree');
  late final _BASS_VST_ChannelFree =
      _BASS_VST_ChannelFreePtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_GetParamCount(
    int vstHandle,
  ) {
    return _BASS_VST_GetParamCount(
      vstHandle,
    );
  }

  late final _BASS_VST_GetParamCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(DWORD)>>(
          'BASS_VST_GetParamCount');
  late final _BASS_VST_GetParamCount =
      _BASS_VST_GetParamCountPtr.asFunction<int Function(int)>(isLeaf: true);

  double BASS_VST_GetParam(
    int vstHandle,
    int paramIndex,
  ) {
    return _BASS_VST_GetParam(
      vstHandle,
      paramIndex,
    );
  }

  late final _BASS_VST_GetParamPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(DWORD, ffi.Int32)>>(
          'BASS_VST_GetParam');
  late final _BASS_VST_GetParam =
      _BASS_VST_GetParamPtr.asFunction<double Function(int, int)>(isLeaf: true);

  int BASS_VST_SetParam(
    int vstHandle,
    int paramIndex,
    double value,
  ) {
    return _BASS_VST_SetParam(
      vstHandle,
      paramIndex,
      value,
    );
  }

  late final _BASS_VST_SetParamPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Int32, ffi.Float)>>(
          'BASS_VST_SetParam');
  late final _BASS_VST_SetParam =
      _BASS_VST_SetParamPtr.asFunction<int Function(int, int, double)>(
          isLeaf: true);

  int BASS_VST_GetParamInfo(
    int vstHandle,
    int paramIndex,
    ffi.Pointer<BASS_VST_PARAM_INFO> ret,
  ) {
    return _BASS_VST_GetParamInfo(
      vstHandle,
      paramIndex,
      ret,
    );
  }

  late final _BASS_VST_GetParamInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Int32,
              ffi.Pointer<BASS_VST_PARAM_INFO>)>>('BASS_VST_GetParamInfo');
  late final _BASS_VST_GetParamInfo = _BASS_VST_GetParamInfoPtr.asFunction<
      int Function(int, int, ffi.Pointer<BASS_VST_PARAM_INFO>)>(isLeaf: true);

  ffi.Pointer<ffi.Int8> BASS_VST_GetChunk(
    int vstHandle,
    int isPreset,
    ffi.Pointer<DWORD> length,
  ) {
    return _BASS_VST_GetChunk(
      vstHandle,
      isPreset,
      length,
    );
  }

  late final _BASS_VST_GetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              DWORD, BOOL, ffi.Pointer<DWORD>)>>('BASS_VST_GetChunk');
  late final _BASS_VST_GetChunk = _BASS_VST_GetChunkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          int, int, ffi.Pointer<DWORD>)>(isLeaf: true);

  int BASS_VST_SetChunk(
    int vstHandle,
    int isPreset,
    ffi.Pointer<ffi.Int8> chunk,
    int length,
  ) {
    return _BASS_VST_SetChunk(
      vstHandle,
      isPreset,
      chunk,
      length,
    );
  }

  late final _BASS_VST_SetChunkPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD, BOOL, ffi.Pointer<ffi.Int8>, DWORD)>>('BASS_VST_SetChunk');
  late final _BASS_VST_SetChunk = _BASS_VST_SetChunkPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>, int)>(isLeaf: true);

  int BASS_VST_GetProgramCount(
    int vstHandle,
  ) {
    return _BASS_VST_GetProgramCount(
      vstHandle,
    );
  }

  late final _BASS_VST_GetProgramCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(DWORD)>>(
          'BASS_VST_GetProgramCount');
  late final _BASS_VST_GetProgramCount =
      _BASS_VST_GetProgramCountPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_GetProgram(
    int vstHandle,
  ) {
    return _BASS_VST_GetProgram(
      vstHandle,
    );
  }

  late final _BASS_VST_GetProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(DWORD)>>(
          'BASS_VST_GetProgram');
  late final _BASS_VST_GetProgram =
      _BASS_VST_GetProgramPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_SetProgram(
    int vstHandle,
    int programIndex,
  ) {
    return _BASS_VST_SetProgram(
      vstHandle,
      programIndex,
    );
  }

  late final _BASS_VST_SetProgramPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Int32)>>(
          'BASS_VST_SetProgram');
  late final _BASS_VST_SetProgram =
      _BASS_VST_SetProgramPtr.asFunction<int Function(int, int)>(isLeaf: true);

  ffi.Pointer<ffi.Float> BASS_VST_GetProgramParam(
    int vstHandle,
    int programIndex,
    ffi.Pointer<DWORD> length,
  ) {
    return _BASS_VST_GetProgramParam(
      vstHandle,
      programIndex,
      length,
    );
  }

  late final _BASS_VST_GetProgramParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(DWORD, ffi.Int32,
              ffi.Pointer<DWORD>)>>('BASS_VST_GetProgramParam');
  late final _BASS_VST_GetProgramParam =
      _BASS_VST_GetProgramParamPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              int, int, ffi.Pointer<DWORD>)>(isLeaf: true);

  int BASS_VST_SetProgramParam(
    int vstHandle,
    int programIndex,
    ffi.Pointer<ffi.Float> param,
    int length,
  ) {
    return _BASS_VST_SetProgramParam(
      vstHandle,
      programIndex,
      param,
      length,
    );
  }

  late final _BASS_VST_SetProgramParamPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Int32, ffi.Pointer<ffi.Float>,
              DWORD)>>('BASS_VST_SetProgramParam');
  late final _BASS_VST_SetProgramParam =
      _BASS_VST_SetProgramParamPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Float>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Int8> BASS_VST_GetProgramName(
    int vstHandle,
    int programIndex,
  ) {
    return _BASS_VST_GetProgramName(
      vstHandle,
      programIndex,
    );
  }

  late final _BASS_VST_GetProgramNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(DWORD, ffi.Int32)>>(
      'BASS_VST_GetProgramName');
  late final _BASS_VST_GetProgramName = _BASS_VST_GetProgramNamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, int)>(isLeaf: true);

  int BASS_VST_SetProgramName(
    int vstHandle,
    int programIndex,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _BASS_VST_SetProgramName(
      vstHandle,
      programIndex,
      name,
    );
  }

  late final _BASS_VST_SetProgramNamePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('BASS_VST_SetProgramName');
  late final _BASS_VST_SetProgramName = _BASS_VST_SetProgramNamePtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  int BASS_VST_Resume(
    int vstHandle,
  ) {
    return _BASS_VST_Resume(
      vstHandle,
    );
  }

  late final _BASS_VST_ResumePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_VST_Resume');
  late final _BASS_VST_Resume =
      _BASS_VST_ResumePtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_SetBypass(
    int vstHandle,
    int state,
  ) {
    return _BASS_VST_SetBypass(
      vstHandle,
      state,
    );
  }

  late final _BASS_VST_SetBypassPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_VST_SetBypass');
  late final _BASS_VST_SetBypass =
      _BASS_VST_SetBypassPtr.asFunction<int Function(int, int)>(isLeaf: true);

  int BASS_VST_GetBypass(
    int vstHandle,
  ) {
    return _BASS_VST_GetBypass(
      vstHandle,
    );
  }

  late final _BASS_VST_GetBypassPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_VST_GetBypass');
  late final _BASS_VST_GetBypass =
      _BASS_VST_GetBypassPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_GetInfo(
    int vstHandle,
    ffi.Pointer<BASS_VST_INFO> ret,
  ) {
    return _BASS_VST_GetInfo(
      vstHandle,
      ret,
    );
  }

  late final _BASS_VST_GetInfoPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<BASS_VST_INFO>)>>(
      'BASS_VST_GetInfo');
  late final _BASS_VST_GetInfo = _BASS_VST_GetInfoPtr.asFunction<
      int Function(int, ffi.Pointer<BASS_VST_INFO>)>(isLeaf: true);

  int BASS_VST_EmbedEditor(
    int vstHandle,
    HWND parentWindow,
  ) {
    return _BASS_VST_EmbedEditor(
      vstHandle,
      parentWindow,
    );
  }

  late final _BASS_VST_EmbedEditorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HWND)>>(
          'BASS_VST_EmbedEditor');
  late final _BASS_VST_EmbedEditor =
      _BASS_VST_EmbedEditorPtr.asFunction<int Function(int, HWND)>(
          isLeaf: true);

  int BASS_VST_SetScope(
    int vstHandle,
    int scope,
  ) {
    return _BASS_VST_SetScope(
      vstHandle,
      scope,
    );
  }

  late final _BASS_VST_SetScopePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_VST_SetScope');
  late final _BASS_VST_SetScope =
      _BASS_VST_SetScopePtr.asFunction<int Function(int, int)>(isLeaf: true);

  int BASS_VST_HasEditor(
    int vstHandle,
  ) {
    return _BASS_VST_HasEditor(
      vstHandle,
    );
  }

  late final _BASS_VST_HasEditorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_VST_HasEditor');
  late final _BASS_VST_HasEditor =
      _BASS_VST_HasEditorPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_VST_EditorInfo(
    int vstHandle,
    ffi.Pointer<ffi.Void> pInfoBuff,
  ) {
    return _BASS_VST_EditorInfo(
      vstHandle,
      pInfoBuff,
    );
  }

  late final _BASS_VST_EditorInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<ffi.Void>)>>(
          'BASS_VST_EditorInfo');
  late final _BASS_VST_EditorInfo = _BASS_VST_EditorInfoPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_VST_SetCallback(
    int vstHandle,
    ffi.Pointer<
            ffi.NativeFunction<
                DWORD Function(
                    DWORD, DWORD, DWORD, DWORD, ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_VST_SetCallback(
      vstHandle,
      arg1,
      user,
    );
  }

  late final _BASS_VST_SetCallbackPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      DWORD Function(
                          DWORD, DWORD, DWORD, DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_VST_SetCallback');
  late final _BASS_VST_SetCallback = _BASS_VST_SetCallbackPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  DWORD Function(
                      DWORD, DWORD, DWORD, DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_VST_SetLanguage(
    ffi.Pointer<ffi.Int8> lang,
  ) {
    return _BASS_VST_SetLanguage(
      lang,
    );
  }

  late final _BASS_VST_SetLanguagePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Int8>)>>(
          'BASS_VST_SetLanguage');
  late final _BASS_VST_SetLanguage =
      _BASS_VST_SetLanguagePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>(
          isLeaf: true);

  int BASS_VST_ProcessEvent(
    int vstHandle,
    int midiCh,
    int event,
    int param,
  ) {
    return _BASS_VST_ProcessEvent(
      vstHandle,
      midiCh,
      event,
      param,
    );
  }

  late final _BASS_VST_ProcessEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD, DWORD, DWORD)>>(
          'BASS_VST_ProcessEvent');
  late final _BASS_VST_ProcessEvent =
      _BASS_VST_ProcessEventPtr.asFunction<int Function(int, int, int, int)>(
          isLeaf: true);

  int BASS_VST_ProcessEventRaw(
    int vstHandle,
    ffi.Pointer<ffi.Void> event,
    int length,
  ) {
    return _BASS_VST_ProcessEventRaw(
      vstHandle,
      event,
      length,
    );
  }

  late final _BASS_VST_ProcessEventRawPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_VST_ProcessEventRaw');
  late final _BASS_VST_ProcessEventRaw = _BASS_VST_ProcessEventRawPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_VST_CheckPreset(
    ffi.Pointer<ffi.Void> dllFile,
    int flag,
  ) {
    return _BASS_VST_CheckPreset(
      dllFile,
      flag,
    );
  }

  late final _BASS_VST_CheckPresetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Void>, DWORD)>>(
          'BASS_VST_CheckPreset');
  late final _BASS_VST_CheckPreset = _BASS_VST_CheckPresetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_VST_StoreOldPreset(
    ffi.Pointer<ffi.Void> presetPath,
    int uid,
    int vstHandle,
  ) {
    return _BASS_VST_StoreOldPreset(
      presetPath,
      uid,
      vstHandle,
    );
  }

  late final _BASS_VST_StoreOldPresetPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<ffi.Void>, DWORD, DWORD)>>('BASS_VST_StoreOldPreset');
  late final _BASS_VST_StoreOldPreset = _BASS_VST_StoreOldPresetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  int BASS_VST_StorePreset(
    ffi.Pointer<ffi.Void> presetPath,
    int uid,
    int vstHandle,
  ) {
    return _BASS_VST_StorePreset(
      presetPath,
      uid,
      vstHandle,
    );
  }

  late final _BASS_VST_StorePresetPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<ffi.Void>, DWORD, DWORD)>>('BASS_VST_StorePreset');
  late final _BASS_VST_StorePreset = _BASS_VST_StorePresetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int)>(isLeaf: true);

  int BASS_VST_RecallPreset(
    ffi.Pointer<ffi.Void> presetPath,
    int vstHandle,
  ) {
    return _BASS_VST_RecallPreset(
      presetPath,
      vstHandle,
    );
  }

  late final _BASS_VST_RecallPresetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Void>, DWORD)>>(
          'BASS_VST_RecallPreset');
  late final _BASS_VST_RecallPreset = _BASS_VST_RecallPresetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_VST_ReadPresetInfo(
    ffi.Pointer<ffi.Void> presetPath,
    ffi.Pointer<ffi.Void> presetData,
  ) {
    return _BASS_VST_ReadPresetInfo(
      presetPath,
      presetData,
    );
  }

  late final _BASS_VST_ReadPresetInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('BASS_VST_ReadPresetInfo');
  late final _BASS_VST_ReadPresetInfo = _BASS_VST_ReadPresetInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_VST_Dispatcher(
    int vstHandle,
    int opCode,
    int index,
    int value,
    ffi.Pointer<ffi.Void> ptr,
    double opt,
  ) {
    return _BASS_VST_Dispatcher(
      vstHandle,
      opCode,
      index,
      value,
      ptr,
      opt,
    );
  }

  late final _BASS_VST_DispatcherPtr = _lookup<
      ffi.NativeFunction<
          QWORD Function(DWORD, DWORD, DWORD, QWORD, ffi.Pointer<ffi.Void>,
              ffi.Float)>>('BASS_VST_Dispatcher');
  late final _BASS_VST_Dispatcher = _BASS_VST_DispatcherPtr.asFunction<
      int Function(
          int, int, int, int, ffi.Pointer<ffi.Void>, double)>(isLeaf: true);
}

typedef DWORD = ffi.Uint64;
typedef BOOL = ffi.Int32;

class BASS_VST_PARAM_INFO extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> unit;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> display;

  @ffi.Float()
  external double defaultValue;
}

class BASS_VST_INFO extends ffi.Struct {
  @DWORD()
  external int channelHandle;

  @DWORD()
  external int uniqueID;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Int8> effectName;

  @DWORD()
  external int effectVersion;

  @DWORD()
  external int effectVstVersion;

  @DWORD()
  external int hostVstVersion;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Int8> productName;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Int8> vendorName;

  @DWORD()
  external int vendorVersion;

  @DWORD()
  external int chansIn;

  @DWORD()
  external int chansOut;

  @DWORD()
  external int initialDelay;

  @DWORD()
  external int hasEditor;

  @DWORD()
  external int editorWidth;

  @DWORD()
  external int editorHeight;

  external ffi.Pointer<ffi.Void> aeffect;

  @DWORD()
  external int isInstrument;

  @DWORD()
  external int dspHandle;
}

typedef HWND = ffi.Pointer<HWND__>;

class HWND__ extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

class BASS_VST_AUDIO_MASTER_PARAM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> aeffect;

  @ffi.Int64()
  external int opcode;

  @ffi.Int64()
  external int index;

  @ffi.Int64()
  external int value;

  external ffi.Pointer<ffi.Void> ptr;

  @ffi.Float()
  external double opt;

  @ffi.Int64()
  external int doDefault;
}

typedef QWORD = ffi.Uint64;

const int BASS_VST_KEEP_CHANS = 1;

const int BASS_VST_PARAM_CHANGED = 1;

const int BASS_VST_EDITOR_RESIZED = 2;

const int BASS_VST_AUDIO_MASTER = 3;

const int BASS_VST_ERROR_NOINPUTS = 3000;

const int BASS_VST_ERROR_NOOUTPUTS = 3001;

const int BASS_VST_ERROR_NOREALTIME = 3002;
