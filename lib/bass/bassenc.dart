// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, constant_identifier_names

import 'dart:ffi' as ffi;

/// Bindings to `bassenc.h`.
class Bassenc {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bassenc(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bassenc.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_Encode_GetVersion() {
    return _BASS_Encode_GetVersion();
  }

  late final _BASS_Encode_GetVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_Encode_GetVersion');
  late final _BASS_Encode_GetVersion =
      _BASS_Encode_GetVersionPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_Encode_Start(
    int handle,
    ffi.Pointer<ffi.Int8> cmdline,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                    ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_Start(
      handle,
      cmdline,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_Encode_StartPtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(
              DWORD,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                          DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_Start');
  late final _BASS_Encode_Start = _BASS_Encode_StartPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                      DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_StartLimit(
    int handle,
    ffi.Pointer<ffi.Int8> cmdline,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                    ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
    int limit,
  ) {
    return _BASS_Encode_StartLimit(
      handle,
      cmdline,
      flags,
      proc,
      user,
      limit,
    );
  }

  late final _BASS_Encode_StartLimitPtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(
              DWORD,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                          DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_Encode_StartLimit');
  late final _BASS_Encode_StartLimit = _BASS_Encode_StartLimitPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                      DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int)>(isLeaf: true);

  int BASS_Encode_StartUser(
    int handle,
    ffi.Pointer<ffi.Int8> filename,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                DWORD Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                    DWORD, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_StartUser(
      handle,
      filename,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_Encode_StartUserPtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(
              DWORD,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      DWORD Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                          DWORD, DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_StartUser');
  late final _BASS_Encode_StartUser = _BASS_Encode_StartUserPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  DWORD Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                      DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_AddChunk(
    int handle,
    ffi.Pointer<ffi.Int8> id,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_Encode_AddChunk(
      handle,
      id,
      buffer,
      length,
    );
  }

  late final _BASS_Encode_AddChunkPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HENCODE, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_Encode_AddChunk');
  late final _BASS_Encode_AddChunk = _BASS_Encode_AddChunkPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>, int)>(
      isLeaf: true);

  int BASS_Encode_Write(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_Encode_Write(
      handle,
      buffer,
      length,
    );
  }

  late final _BASS_Encode_WritePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, ffi.Pointer<ffi.Void>, DWORD)>>('BASS_Encode_Write');
  late final _BASS_Encode_Write = _BASS_Encode_WritePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_Encode_Stop(
    int handle,
  ) {
    return _BASS_Encode_Stop(
      handle,
    );
  }

  late final _BASS_Encode_StopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_Encode_Stop');
  late final _BASS_Encode_Stop =
      _BASS_Encode_StopPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_Encode_StopEx(
    int handle,
    int queue,
  ) {
    return _BASS_Encode_StopEx(
      handle,
      queue,
    );
  }

  late final _BASS_Encode_StopExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_Encode_StopEx');
  late final _BASS_Encode_StopEx =
      _BASS_Encode_StopExPtr.asFunction<int Function(int, int)>(isLeaf: true);

  int BASS_Encode_SetPaused(
    int handle,
    int paused,
  ) {
    return _BASS_Encode_SetPaused(
      handle,
      paused,
    );
  }

  late final _BASS_Encode_SetPausedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_Encode_SetPaused');
  late final _BASS_Encode_SetPaused =
      _BASS_Encode_SetPausedPtr.asFunction<int Function(int, int)>(
          isLeaf: true);

  int BASS_Encode_IsActive(
    int handle,
  ) {
    return _BASS_Encode_IsActive(
      handle,
    );
  }

  late final _BASS_Encode_IsActivePtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'BASS_Encode_IsActive');
  late final _BASS_Encode_IsActive =
      _BASS_Encode_IsActivePtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_Encode_SetNotify(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_SetNotify(
      handle,
      proc,
      user,
    );
  }

  late final _BASS_Encode_SetNotifyPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          HENCODE, DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_SetNotify');
  late final _BASS_Encode_SetNotify = _BASS_Encode_SetNotifyPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_GetCount(
    int handle,
    int count,
  ) {
    return _BASS_Encode_GetCount(
      handle,
      count,
    );
  }

  late final _BASS_Encode_GetCountPtr =
      _lookup<ffi.NativeFunction<QWORD Function(HENCODE, DWORD)>>(
          'BASS_Encode_GetCount');
  late final _BASS_Encode_GetCount =
      _BASS_Encode_GetCountPtr.asFunction<int Function(int, int)>(isLeaf: true);

  int BASS_Encode_SetChannel(
    int handle,
    int channel,
  ) {
    return _BASS_Encode_SetChannel(
      handle,
      channel,
    );
  }

  late final _BASS_Encode_SetChannelPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_Encode_SetChannel');
  late final _BASS_Encode_SetChannel =
      _BASS_Encode_SetChannelPtr.asFunction<int Function(int, int)>(
          isLeaf: true);

  int BASS_Encode_GetChannel(
    int handle,
  ) {
    return _BASS_Encode_GetChannel(
      handle,
    );
  }

  late final _BASS_Encode_GetChannelPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HENCODE)>>(
          'BASS_Encode_GetChannel');
  late final _BASS_Encode_GetChannel =
      _BASS_Encode_GetChannelPtr.asFunction<int Function(int)>(isLeaf: true);

  int BASS_Encode_UserOutput(
    int handle,
    int offset,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_Encode_UserOutput(
      handle,
      offset,
      buffer,
      length,
    );
  }

  late final _BASS_Encode_UserOutputPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HENCODE, QWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_Encode_UserOutput');
  late final _BASS_Encode_UserOutput = _BASS_Encode_UserOutputPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  int BASS_Encode_GetACMFormat(
    int handle,
    ffi.Pointer<ffi.Void> form,
    int formlen,
    ffi.Pointer<ffi.Int8> title,
    int flags,
  ) {
    return _BASS_Encode_GetACMFormat(
      handle,
      form,
      formlen,
      title,
      flags,
    );
  }

  late final _BASS_Encode_GetACMFormatPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<ffi.Void>, DWORD,
              ffi.Pointer<ffi.Int8>, DWORD)>>('BASS_Encode_GetACMFormat');
  late final _BASS_Encode_GetACMFormat =
      _BASS_Encode_GetACMFormatPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>,
              int)>(isLeaf: true);

  int BASS_Encode_StartACM(
    int handle,
    ffi.Pointer<ffi.Void> form,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                    ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_StartACM(
      handle,
      form,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_Encode_StartACMPtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(
              DWORD,
              ffi.Pointer<ffi.Void>,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                          DWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_StartACM');
  late final _BASS_Encode_StartACM = _BASS_Encode_StartACMPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                      DWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_StartACMFile(
    int handle,
    ffi.Pointer<ffi.Void> form,
    int flags,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _BASS_Encode_StartACMFile(
      handle,
      form,
      flags,
      filename,
    );
  }

  late final _BASS_Encode_StartACMFilePtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(DWORD, ffi.Pointer<ffi.Void>, DWORD,
              ffi.Pointer<ffi.Int8>)>>('BASS_Encode_StartACMFile');
  late final _BASS_Encode_StartACMFile =
      _BASS_Encode_StartACMFilePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  int BASS_Encode_CastInit(
    int handle,
    ffi.Pointer<ffi.Int8> server,
    ffi.Pointer<ffi.Int8> pass,
    ffi.Pointer<ffi.Int8> content,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> url,
    ffi.Pointer<ffi.Int8> genre,
    ffi.Pointer<ffi.Int8> desc,
    ffi.Pointer<ffi.Int8> headers,
    int bitrate,
    int flags,
  ) {
    return _BASS_Encode_CastInit(
      handle,
      server,
      pass,
      content,
      name,
      url,
      genre,
      desc,
      headers,
      bitrate,
      flags,
    );
  }

  late final _BASS_Encode_CastInitPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HENCODE,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              DWORD)>>('BASS_Encode_CastInit');
  late final _BASS_Encode_CastInit = _BASS_Encode_CastInitPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          int)>(isLeaf: true);

  int BASS_Encode_CastSetTitle(
    int handle,
    ffi.Pointer<ffi.Int8> title,
    ffi.Pointer<ffi.Int8> url,
  ) {
    return _BASS_Encode_CastSetTitle(
      handle,
      title,
      url,
    );
  }

  late final _BASS_Encode_CastSetTitlePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HENCODE, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('BASS_Encode_CastSetTitle');
  late final _BASS_Encode_CastSetTitle =
      _BASS_Encode_CastSetTitlePtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  int BASS_Encode_CastSendMeta(
    int handle,
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _BASS_Encode_CastSendMeta(
      handle,
      type,
      data,
      length,
    );
  }

  late final _BASS_Encode_CastSendMetaPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_Encode_CastSendMeta');
  late final _BASS_Encode_CastSendMeta =
      _BASS_Encode_CastSendMetaPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int)>(isLeaf: true);

  ffi.Pointer<ffi.Int8> BASS_Encode_CastGetStats(
    int handle,
    int type,
    ffi.Pointer<ffi.Int8> pass,
  ) {
    return _BASS_Encode_CastGetStats(
      handle,
      type,
      pass,
    );
  }

  late final _BASS_Encode_CastGetStatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(HENCODE, DWORD,
              ffi.Pointer<ffi.Int8>)>>('BASS_Encode_CastGetStats');
  late final _BASS_Encode_CastGetStats =
      _BASS_Encode_CastGetStatsPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              int, int, ffi.Pointer<ffi.Int8>)>(isLeaf: true);

  int BASS_Encode_ServerInit(
    int handle,
    ffi.Pointer<ffi.Int8> port,
    int buffer,
    int burst,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                BOOL Function(HENCODE, BOOL, ffi.Pointer<ffi.Int8>,
                    ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_ServerInit(
      handle,
      port,
      buffer,
      burst,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_Encode_ServerInitPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HENCODE,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              DWORD,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      BOOL Function(HENCODE, BOOL, ffi.Pointer<ffi.Int8>,
                          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_ServerInit');
  late final _BASS_Encode_ServerInit = _BASS_Encode_ServerInitPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  BOOL Function(HENCODE, BOOL, ffi.Pointer<ffi.Int8>,
                      ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_ServerKick(
    int handle,
    ffi.Pointer<ffi.Int8> client,
  ) {
    return _BASS_Encode_ServerKick(
      handle,
      client,
    );
  }

  late final _BASS_Encode_ServerKickPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HENCODE, ffi.Pointer<ffi.Int8>)>>(
      'BASS_Encode_ServerKick');
  late final _BASS_Encode_ServerKick = _BASS_Encode_ServerKickPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>)>(isLeaf: true);
}

typedef DWORD = ffi.Uint64;
typedef HENCODE = DWORD;
typedef BOOL = ffi.Int32;
typedef QWORD = ffi.Uint64;

const int BASS_ERROR_ACM_CANCEL = 2000;

const int BASS_ERROR_CAST_DENIED = 2100;

const int BASS_ERROR_SERVER_CERT = 2101;

const int BASS_CONFIG_ENCODE_PRIORITY = 66304;

const int BASS_CONFIG_ENCODE_QUEUE = 66305;

const int BASS_CONFIG_ENCODE_CAST_TIMEOUT = 66320;

const int BASS_CONFIG_ENCODE_ACM_LOAD = 66306;

const int BASS_CONFIG_ENCODE_CAST_PROXY = 66321;

const int BASS_CONFIG_ENCODE_CAST_BIND = 66322;

const int BASS_CONFIG_ENCODE_SERVER_CERT = 66336;

const int BASS_CONFIG_ENCODE_SERVER_KEY = 66337;

const int BASS_ENCODE_NOHEAD = 1;

const int BASS_ENCODE_FP_8BIT = 2;

const int BASS_ENCODE_FP_16BIT = 4;

const int BASS_ENCODE_FP_24BIT = 6;

const int BASS_ENCODE_FP_32BIT = 8;

const int BASS_ENCODE_FP_AUTO = 14;

const int BASS_ENCODE_BIGEND = 16;

const int BASS_ENCODE_PAUSE = 32;

const int BASS_ENCODE_PCM = 64;

const int BASS_ENCODE_RF64 = 128;

const int BASS_ENCODE_MONO = 256;

const int BASS_ENCODE_QUEUE = 512;

const int BASS_ENCODE_WFEXT = 1024;

const int BASS_ENCODE_CAST_NOLIMIT = 4096;

const int BASS_ENCODE_LIMIT = 8192;

const int BASS_ENCODE_AIFF = 16384;

const int BASS_ENCODE_DITHER = 32768;

const int BASS_ENCODE_AUTOFREE = 262144;

const int BASS_ACM_DEFAULT = 1;

const int BASS_ACM_RATE = 2;

const int BASS_ACM_CHANS = 4;

const int BASS_ACM_SUGGEST = 8;

const int BASS_ENCODE_COUNT_IN = 0;

const int BASS_ENCODE_COUNT_OUT = 1;

const int BASS_ENCODE_COUNT_CAST = 2;

const int BASS_ENCODE_COUNT_QUEUE = 3;

const int BASS_ENCODE_COUNT_QUEUE_LIMIT = 4;

const int BASS_ENCODE_COUNT_QUEUE_FAIL = 5;

const int BASS_ENCODE_COUNT_IN_FP = 6;

const String BASS_ENCODE_TYPE_MP3 = 'audio/mpeg';

const String BASS_ENCODE_TYPE_OGG = 'audio/ogg';

const String BASS_ENCODE_TYPE_AAC = 'audio/aacp';

const int BASS_ENCODE_CAST_PUBLIC = 1;

const int BASS_ENCODE_CAST_PUT = 2;

const int BASS_ENCODE_CAST_SSL = 4;

const int BASS_ENCODE_STATS_SHOUT = 0;

const int BASS_ENCODE_STATS_ICE = 1;

const int BASS_ENCODE_STATS_ICESERV = 2;

const int BASS_ENCODE_SERVER_NOHTTP = 1;

const int BASS_ENCODE_SERVER_META = 2;

const int BASS_ENCODE_SERVER_SSL = 4;

const int BASS_ENCODE_SERVER_SSLONLY = 8;

const int BASS_ENCODE_NOTIFY_ENCODER = 1;

const int BASS_ENCODE_NOTIFY_CAST = 2;

const int BASS_ENCODE_NOTIFY_SERVER = 3;

const int BASS_ENCODE_NOTIFY_CAST_TIMEOUT = 65536;

const int BASS_ENCODE_NOTIFY_QUEUE_FULL = 65537;

const int BASS_ENCODE_NOTIFY_FREE = 65538;
