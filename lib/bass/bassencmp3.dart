// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names

import 'dart:ffi' as ffi;

/// Bindings to `bassencmp3.h`.
class Bassencmp3 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bassencmp3(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bassencmp3.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_Encode_MP3_GetVersion() {
    return _BASS_Encode_MP3_GetVersion();
  }

  late final _BASS_Encode_MP3_GetVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'BASS_Encode_MP3_GetVersion');
  late final _BASS_Encode_MP3_GetVersion =
      _BASS_Encode_MP3_GetVersionPtr.asFunction<int Function()>(isLeaf: true);

  int BASS_Encode_MP3_Start(
    int handle,
    ffi.Pointer<ffi.Int8> options,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>, DWORD,
                    QWORD, ffi.Pointer<ffi.Void>)>>
        proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_Encode_MP3_Start(
      handle,
      options,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_Encode_MP3_StartPtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(
              DWORD,
              ffi.Pointer<ffi.Int8>,
              DWORD,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                          DWORD, QWORD, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BASS_Encode_MP3_Start');
  late final _BASS_Encode_MP3_Start = _BASS_Encode_MP3_StartPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(HENCODE, DWORD, ffi.Pointer<ffi.Void>,
                      DWORD, QWORD, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>(isLeaf: true);

  int BASS_Encode_MP3_StartFile(
    int handle,
    ffi.Pointer<ffi.Int8> options,
    int flags,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _BASS_Encode_MP3_StartFile(
      handle,
      options,
      flags,
      filename,
    );
  }

  late final _BASS_Encode_MP3_StartFilePtr = _lookup<
      ffi.NativeFunction<
          HENCODE Function(DWORD, ffi.Pointer<ffi.Int8>, DWORD,
              ffi.Pointer<ffi.Int8>)>>('BASS_Encode_MP3_StartFile');
  late final _BASS_Encode_MP3_StartFile =
      _BASS_Encode_MP3_StartFilePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<ffi.Int8>)>(isLeaf: true);
}

typedef DWORD = ffi.Uint64;
typedef HENCODE = DWORD;
typedef QWORD = ffi.Uint64;
